openapi: 3.0.3
info:
  title: ranking.leinadium.dev
  version: 0.1.0
  description: |-
    Uma descrição muito muito longa.
  contact:
    url: "leinadium.dev"
    email: contact@leinadium.dev
# servers:
#   - url: ranking.leinadium.dev/api/v1
tags:
  - name: Status
    description: Current application status.
  - name: States
    description: List available states
  - name: Auth
    description: Authentication operations.
  - name: Person
    description: Person/Competitor related operations
  - name: Ranking
    description: Ranking related operations

paths:
  /status:
    get:
      tags:
        - Status
      summary: Get current database update status
      description: Get the last database update/synchronization with WCA
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /states:
    get:
      tags:
        - States
      summary: Get current available states
      description: Get current states stored in the database available for querying
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/States"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search:
    get:
      tags:
        - Person
      summary: Search people on database
      description: Search for competitors' names in the database. The search term may be the full name or part of it
      parameters:
        - in: query
          name: s
          description: The search query text
          required: true
          example: "Silva"
          schema:
            type: string
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Search"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /person/results/{personId}:
    get:
      tags:
        - Person
      summary: Get person results in a tabular format
      description: Get information of a person in the database in a array of tuples
      parameters:
        - in: path
          name: personId
          description: Person WCA's ID
          example: "2018GUIM02"
          schema:
            $ref: "#/components/schemas/WCAID"
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonResults"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /person/info/{personId}:
    get:
      tags:
        - Person
      summary: Get person base information
      description: Get base information of a person, such as name and competitions
      parameters:
        - in: path
          name: personId
          description: Person WCA's ID
          example: "2018GUIM02"
          schema:
            $ref: "#/components/schemas/WCAID"
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonInfo"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /person/{mode}/{personId}:
    get:
      tags:
        - Person
      summary: Get person ranking
      description: Get rankings of the person considering average or single
      parameters:
        - in: path
          name: personId
          description: Person WCA's ID
          example: "2018GUIM02"
          schema:
            $ref: "#/components/schemas/WCAID"
        - in: path
          name: mode
          description: "Filtering mode"
          example: "average"
          schema:
            type: string
            enum: ["average", "single"]
      responses:
        "200":
          description: "Information retrieved successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonRankings"
        "500":
          description: "Unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
          example: "023"
        message:
          type: string
          description: Error description
          example: Could not reach database. Try again later
    WCAID:
      type: string
      description: WCA Competitor's ID
      example: 2018GUIM02
    Event:
      type: string
      description: Event ID
      example: "333"
      enum:
        - "333"
        - "333bf"
        - "333ft"
        - "333mbf"
        - "333mbo"
        - "clock"
        - "magic"
        - "mmmagic"
        - "minx"
        - "pyram"
        - "skewb"
        - "sq1"
        - "333fm"
        - "333oh"
        - "444bf"
        - "555bf"
        - "222"
        - "444"
        - "555"
        - "666"
        - "777"
    Status:
      type: object
      properties:
        lastUpdate:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-01T00:00:00.000Z"
    States:
      type: array
      items:
        type: string
        description: State ID
        example: "RJ"
    SearchItem:
      type: object
      properties:
        wcaId:
          $ref: "#/components/schemas/WCAID"
        wcaName:
          type: string
          description: WCA Competitor's Name
          example: João da Silva
        stateId:
          type: string
          description: State ID
          example: PR
    Search:
      type: array
      items:
        $ref: "#/components/schemas/SearchItem"
    PersonResult:
      type: object
      properties:
        event:
          $ref: "#/components/schemas/Event"
        single:
          type: integer
          description: "Person's best single time in the event"
          example: 12.34
          nullable: true
        average:
          type: integer
          description: "Person's best average time in the event"
          example: 12.34
          nullable: true
        rankingSingle:
          type: integer
          description: "Person's ranking in the event considering its best single time"
          example: 
          nullable: false
        rankingAverage:
          type: integer
          description: "Person's ranking in the event considering its best average time"
          example: 13
          nullable: false
    PersonResults:
      type: array
      items:
        $ref: "#/components/schemas/PersonResult"
    PersonInfo:
      type: object
      properties:
        name:
          type: string
          description: "Person's name"
          example: "Pedro"
          nullable: false
        state:
          type: string
          description: State ID
          example: "RJ"
          nullable: true
        registered:
          type: boolean
          description: "Person is registered on the website or not"
          example: "true"
          nullable: false
        totalCompetitions:
          type: integer
          description: "Person's total number of competitions"
          example: 10
          nullable: false
        stateCompetitions:
          type: integer
          description: "Person's total number of competitions in his state"
          example: 5
          nullable: false
    PersonRankings:
      type: array
      items:
        $ref: "#/components/schemas/PersonRanking"
    PersonRanking:
      type: object
      properties:
        event:
          $ref: "#/components/schemas/Event"
        ranking:
          type: integer
          description: "Person ranking"
          example: 13
          nullable: false
        best:
          type: integer
          description: "Person's best result in the event"
          example: 12.34
          nullable: true
        competitionId:
          type: string
          description: "Competition's ID in which the competitior obtained the best result"
          example: "BoraBoraOpen2025"
          nullable: true
        competitionName:
          type: string
          description: "Competition's name in which the competitior obtained the best result"
          example: "Bora Bora Open 2025"
          nullable: true
        competitionState:
          type: string
          description: "Competition's state in which the competitor obtained the best result"
          nullable: true
        times:
          type: array
          items:
            type: integer
            description: "A result in the person's average using WCA format"
            example: 1234
            nullable: true
          minItems: 5
          maxItems: 5

  securitySchemes:
    api_auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://ranking.leinadium.dev/v1/
          scopes:
            read:person: read persons
    api_token:
      type: apiKey
      name: Authorization
      description: "Access token as 'Bearer {token}'"
      in: header
